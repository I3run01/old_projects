import { useContext, useEffect, useState } from "react"
import { Context } from "../../contexts/Context"

type Props = {
    hoverColor: string
}

export const GitHubIcon = ({hoverColor}: Props) => {
    const {state, dispatch} = useContext(Context)
    const [backgroudColor, setbackgroudColor] = useState(state.theme.status == 'dark' ? 'white' : 'black')

    useEffect(() => {
        ChangeThemeColor()
    }, [state.theme.status])

    const ChangeThemeColor = () => { 
            if(state.theme.status == 'dark') setbackgroudColor('white')
            else setbackgroudColor('black')
    }

    return (
        <svg 
        onMouseEnter={() => {setbackgroudColor(hoverColor)}}
        onMouseLeave={() => {setbackgroudColor(state.theme.status == 'dark' ? 'white' : 'black')}}
        width="20px" height="20px" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" className="GitHubClass">
            <path fill={backgroudColor} d="M20,10.2504514 C20,12.4838397 19.3641493,14.4925545 18.0924479,16.2765957 C16.8207465,18.060637 15.1779514,19.2952291 13.1640625,19.9803721 C12.9296875,20.0248619 12.7582465,19.9937191 12.6497396,19.8869435 C12.5412326,19.780168 12.4869791,19.6466986 12.4869792,19.4865353 L12.4869792,16.6703305 C12.4869792,15.8072283 12.2612847,15.175473 11.8098958,14.7750648 C12.3046875,14.721677 12.749566,14.6415953 13.1445312,14.5348198 C13.5394965,14.4280442 13.9474826,14.254534 14.3684896,14.0142891 C14.7894965,13.7740441 15.141059,13.4781869 15.4231771,13.1267174 C15.7052951,12.7752479 15.9353298,12.308105 16.1132812,11.7252885 C16.2912326,11.1424721 16.3802083,10.4729005 16.3802083,9.71657375 C16.3802083,8.63992043 16.0373264,7.72343042 15.3515625,6.9671037 C15.6727431,6.15738922 15.6380208,5.24979717 15.2473958,4.24432755 C15.0043403,4.1642459 14.6527778,4.21318469 14.1927083,4.39114391 C13.7326389,4.56910313 13.3333333,4.76485827 12.9947917,4.97840935 L12.5,5.29873596 C11.6927083,5.06738897 10.859375,4.95171547 10,4.95171547 C9.14062499,4.95171547 8.30729166,5.06738897 7.5,5.29873596 C7.36111111,5.20085839 7.1766493,5.08073592 6.94661458,4.93836854 C6.71657986,4.79600116 6.35416667,4.62471541 5.85937499,4.42451127 C5.36458332,4.22430714 4.99131943,4.1642459 4.73958333,4.24432755 C4.35763889,5.24979719 4.32725695,6.15738923 4.6484375,6.9671037 C3.96267361,7.72343042 3.61979167,8.63992043 3.61979167,9.71657375 C3.61979167,10.4729005 3.70876737,11.1402476 3.88671876,11.7186151 C4.06467015,12.2969825 4.29253473,12.7641255 4.57031251,13.120044 C4.84809028,13.4759624 5.19748264,13.7740441 5.61848959,14.0142891 C6.03949654,14.254534 6.44748265,14.4280443 6.84244791,14.5348198 C7.23741317,14.6415953 7.68229165,14.721677 8.17708333,14.7750648 C7.82986111,15.0953914 7.6171875,15.5536364 7.5390625,16.1497998 C7.35677083,16.2387794 7.16145833,16.3055141 6.95312499,16.3500039 C6.74479166,16.3944937 6.49739583,16.4167386 6.21093751,16.4167386 C5.92447919,16.4167386 5.64019099,16.3210856 5.35807291,16.1297794 C5.07595483,15.9384732 4.83506942,15.6604119 4.63541668,15.2955955 C4.47048612,15.0108607 4.25998265,14.7795137 4.00390626,14.6015545 C3.74782986,14.4235953 3.53298612,14.3168197 3.35937501,14.2812279 L3.09895833,14.2411871 C2.91666667,14.2411871 2.79079861,14.2612075 2.72135418,14.3012483 C2.65190974,14.3412891 2.63020835,14.3924524 2.65625001,14.4547382 C2.68229166,14.5170239 2.72135416,14.5793096 2.77343751,14.6415953 C2.82552085,14.7038811 2.88194446,14.7572688 2.94270833,14.8017586 L3.03385416,14.8684934 C3.22482639,14.957473 3.41362848,15.1265342 3.60026042,15.3756771 C3.78689236,15.62482 3.92361111,15.8517181 4.01041667,16.0563712 L4.14062501,16.3633509 C4.25347222,16.7014734 4.44444444,16.9750857 4.71354167,17.1841878 C4.98263889,17.3932899 5.2734375,17.5267593 5.58593749,17.584596 C5.89843749,17.6424328 6.20008679,17.6735757 6.49088542,17.6780246 C6.78168404,17.6824736 7.02256946,17.6669022 7.21354167,17.6313103 L7.51302084,17.5779226 C7.51302084,17.9160451 7.51519097,18.3120044 7.51953125,18.7658004 C7.52387152,19.2195964 7.52604166,19.4598414 7.52604166,19.4865353 C7.52604166,19.6466986 7.46961805,19.780168 7.35677083,19.8869435 C7.24392362,19.9937191 7.07031251,20.024862 6.8359375,19.9803721 C4.8220486,19.2952291 3.17925347,18.060637 1.90755209,16.2765957 C0.635850712,14.4925545 0,12.4838397 0,10.2504514 C0,8.39077752 0.447048612,6.67569548 1.34114584,5.10520531 C2.23524306,3.53471514 3.4483507,2.29122504 4.98046876,1.37473503 C6.51258682,0.458245009 8.1857639,0 10,0 C11.8142361,0 13.4874132,0.458245009 15.0195312,1.37473503 C16.5516493,2.29122504 17.7647569,3.53471514 18.6588542,5.10520531 C19.5529514,6.67569548 20,8.39077752 20,10.2504514 Z"/>
        </svg>
    )
}

export const LinkedInIcon = ({hoverColor}: Props) => {

    const {state, dispatch} = useContext(Context)
    const [backgroudColor, setbackgroudColor] = useState(state.theme.status == 'dark' ? 'white' : 'black')

    useEffect(() => {
        ChangeThemeColor()
    }, [state.theme.status])

    const ChangeThemeColor = () => { 
            if(state.theme.status == 'dark') setbackgroudColor('white')
            else setbackgroudColor('black')
    }
    return (
        <svg
        onMouseEnter={() => {setbackgroudColor(hoverColor)}}
        onMouseLeave={() => {setbackgroudColor(state.theme.status == 'dark' ? 'white' : 'black')}}
        xmlns="http://www.w3.org/2000/svg" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="0 0 260.366 260.366" className="LinkedinClass">
            <g>
            <path fill={backgroudColor} d="M34.703,0.183C15.582,0.183,0.014,15.748,0,34.884C0,54.02,15.568,69.588,34.703,69.588   c19.128,0,34.688-15.568,34.688-34.704C69.391,15.75,53.83,0.183,34.703,0.183z"/>
            <path fill={backgroudColor} d="M60.748,83.531H8.654c-2.478,0-4.488,2.009-4.488,4.489v167.675c0,2.479,2.01,4.488,4.488,4.488h52.093   c2.479,0,4.489-2.01,4.489-4.488V88.02C65.237,85.539,63.227,83.531,60.748,83.531z"/>
            <path fill={backgroudColor} d="M193.924,81.557c-19.064,0-35.817,5.805-46.04,15.271V88.02c0-2.48-2.01-4.489-4.489-4.489H93.424   c-2.479,0-4.489,2.009-4.489,4.489v167.675c0,2.479,2.01,4.488,4.489,4.488h52.044c2.479,0,4.489-2.01,4.489-4.488v-82.957   c0-23.802,4.378-38.555,26.227-38.555c21.526,0.026,23.137,15.846,23.137,39.977v81.535c0,2.479,2.01,4.488,4.49,4.488h52.068   c2.478,0,4.488-2.01,4.488-4.488v-91.977C260.366,125.465,252.814,81.557,193.924,81.557z"/>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            <g>
            </g>
            </svg>
    )
}

export const WhatsappIcon = ({hoverColor}: Props) => {
    const {state, dispatch} = useContext(Context)
    const [backgroudColor, setbackgroudColor] = useState(state.theme.status == 'dark' ? 'white' : 'black')

    useEffect(() => {
        ChangeThemeColor()
    }, [state.theme.status])

    const ChangeThemeColor = () => { 
            if(state.theme.status == 'dark') setbackgroudColor('white')
            else setbackgroudColor('black')
    }


    return (
        <svg
        onMouseEnter={() => {setbackgroudColor(hoverColor)}}
        onMouseLeave={() => {setbackgroudColor(state.theme.status == 'dark' ? 'white' : 'black')}}
        xmlns="http://www.w3.org/2000/svg" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 308 308" >
        <g id="XMLID_468_">
            <path fill={backgroudColor} id="XMLID_469_" d="M227.904,176.981c-0.6-0.288-23.054-11.345-27.044-12.781c-1.629-0.585-3.374-1.156-5.23-1.156   c-3.032,0-5.579,1.511-7.563,4.479c-2.243,3.334-9.033,11.271-11.131,13.642c-0.274,0.313-0.648,0.687-0.872,0.687   c-0.201,0-3.676-1.431-4.728-1.888c-24.087-10.463-42.37-35.624-44.877-39.867c-0.358-0.61-0.373-0.887-0.376-0.887   c0.088-0.323,0.898-1.135,1.316-1.554c1.223-1.21,2.548-2.805,3.83-4.348c0.607-0.731,1.215-1.463,1.812-2.153   c1.86-2.164,2.688-3.844,3.648-5.79l0.503-1.011c2.344-4.657,0.342-8.587-0.305-9.856c-0.531-1.062-10.012-23.944-11.02-26.348   c-2.424-5.801-5.627-8.502-10.078-8.502c-0.413,0,0,0-1.732,0.073c-2.109,0.089-13.594,1.601-18.672,4.802   c-5.385,3.395-14.495,14.217-14.495,33.249c0,17.129,10.87,33.302,15.537,39.453c0.116,0.155,0.329,0.47,0.638,0.922   c17.873,26.102,40.154,45.446,62.741,54.469c21.745,8.686,32.042,9.69,37.896,9.69c0.001,0,0.001,0,0.001,0   c2.46,0,4.429-0.193,6.166-0.364l1.102-0.105c7.512-0.666,24.02-9.22,27.775-19.655c2.958-8.219,3.738-17.199,1.77-20.458   C233.168,179.508,230.845,178.393,227.904,176.981z"/>
            <path fill={backgroudColor} id="XMLID_470_" d="M156.734,0C73.318,0,5.454,67.354,5.454,150.143c0,26.777,7.166,52.988,20.741,75.928L0.212,302.716   c-0.484,1.429-0.124,3.009,0.933,4.085C1.908,307.58,2.943,308,4,308c0.405,0,0.813-0.061,1.211-0.188l79.92-25.396   c21.87,11.685,46.588,17.853,71.604,17.853C240.143,300.27,308,232.923,308,150.143C308,67.354,240.143,0,156.734,0z    M156.734,268.994c-23.539,0-46.338-6.797-65.936-19.657c-0.659-0.433-1.424-0.655-2.194-0.655c-0.407,0-0.815,0.062-1.212,0.188   l-40.035,12.726l12.924-38.129c0.418-1.234,0.209-2.595-0.561-3.647c-14.924-20.392-22.813-44.485-22.813-69.677   c0-65.543,53.754-118.867,119.826-118.867c66.064,0,119.812,53.324,119.812,118.867   C276.546,215.678,222.799,268.994,156.734,268.994z"/>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        <g>
        </g>
        </svg>
    )
}

export const TelegramIcon = ({hoverColor}: Props) => {
    const {state, dispatch} = useContext(Context)
    const [backgroudColor, setbackgroudColor] = useState(state.theme.status == 'dark' ? 'white' : 'black')

    useEffect(() => {
        ChangeThemeColor()
    }, [state.theme.status])

    const ChangeThemeColor = () => { 
            if(state.theme.status == 'dark') setbackgroudColor('white')
            else setbackgroudColor('black')
    }
    return (
        <svg
        onMouseEnter={() => {setbackgroudColor(hoverColor)}}
        onMouseLeave={() => {setbackgroudColor(state.theme.status == 'dark' ? 'white' : 'black')}}
         xmlns="http://www.w3.org/2000/svg" width="48px" height="48px" viewBox="0 0 48 48" fill="none">
        <path fill={backgroudColor} d="M41.4193 7.30899C41.4193 7.30899 45.3046 5.79399 44.9808 9.47328C44.8729 10.9883 43.9016 16.2908 43.1461 22.0262L40.5559 39.0159C40.5559 39.0159 40.3401 41.5048 38.3974 41.9377C36.4547 42.3705 33.5408 40.4227 33.0011 39.9898C32.5694 39.6652 24.9068 34.7955 22.2086 32.4148C21.4531 31.7655 20.5897 30.4669 22.3165 28.9519L33.6487 18.1305C34.9438 16.8319 36.2389 13.8019 30.8426 17.4812L15.7331 27.7616C15.7331 27.7616 14.0063 28.8437 10.7686 27.8698L3.75342 25.7055C3.75342 25.7055 1.16321 24.0823 5.58815 22.459C16.3807 17.3729 29.6555 12.1786 41.4193 7.30899Z"/>
        </svg>
    )
}
